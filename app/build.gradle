apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "de.mannodermaus.android-junit5"

def secretProperties = new Properties()
secretProperties.load(project.rootProject.file('secret.properties').newDataInputStream())

def appVersionName = '1.0.0'

android {
    compileSdkVersion versions.build.sdk.compile
    buildToolsVersion versions.build.buildTools

    defaultConfig {
        applicationId "com.netchar.wallpaperify"
        minSdkVersion versions.build.sdk.min
        targetSdkVersion versions.build.sdk.target
        versionCode rootProject.extractVersionCode(appVersionName)
        versionName appVersionName

        vectorDrawables {
            useSupportLibrary true
        }

        renderscriptSupportModeEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "RELEASE_API_ACCESS_KEY", secretProperties['RELEASE_API_ACCESS_KEY'])
        buildConfigField("String", "RELEASE_API_SECRET_KEY", secretProperties['RELEASE_API_SECRET_KEY'])
        buildConfigField("String", "DEBUG_API_ACCESS_KEY", secretProperties['DEBUG_API_ACCESS_KEY'])
        buildConfigField("String", "DEBUG_API_SECRET_KEY", secretProperties['DEBUG_API_SECRET_KEY'])
        buildConfigField("String", "GOOGLE_PLAY_LICENSE_KEY", secretProperties['GOOGLE_PLAY_LICENSE_KEY'])
    }

    buildTypes {
        debug {
            minifyEnabled false
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }

        release {
            minifyEnabled false
            applicationIdSuffix '.release'
            versionNameSuffix '-release'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"

    // Androidx
    implementation "androidx.appcompat:appcompat:$versions.androidx.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx.constraintlayout"
    implementation "com.google.android.material:material:$versions.androidx.material"
    implementation "androidx.legacy:legacy-support-v4:$versions.androidx.legacy"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.androidx.lifecycle"

    // Timber
    implementation "com.jakewharton.timber:timber:$versions.timber"

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$versions.kotlinCoroutinesAdapter"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.converterMoshi"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    // ThreeTen
    implementation "com.jakewharton.threetenabp:threetenabp:$versions.threetenabp"

    // Moshi + Kotshi
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    implementation "se.ansman.kotshi:api:$versions.kotshi"
    kapt "se.ansman.kotshi:compiler:$versions.kotshi"

    // Glide
    implementation "com.github.bumptech.glide:glide:$versions.glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"
}

dependencies {
    // Test Runner
    androidTestImplementation "androidx.test:runner:$versions.test.runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.test.espresso"

    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.test.junit"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$versions.test.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.test.junit"
    testImplementation "org.junit.vintage:junit-vintage-engine:$versions.test.junit"

    // Kotlin Coroutines
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.test.coroutines"

    // Mockk
    testImplementation "io.mockk:mockk:$versions.test.mockk"
}

